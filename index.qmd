---
title: "My Own Project"
subtitle: "The Final Assignment"
author: "Shipon Miah"
date: today
date-format: "MMM D, YYYY"

toc: true
toc-depth: 6
echo: true

fig-cap-location: bottom
tbl-cap-location: top
fig-dpi: 700

format:
  html:
    title-block-banner: true
    toc-float: true
    code-fold: true
    code-summary: "Show the code"
    theme: minty
  docx: default
---



# Objectives
As the questions are outlined, the objectives of this assignment is to input data, wrangling it, save the cleaned data in a organized sub-folder, load the data, make summary to represent a table, some graphs (mostly ggplot), focus/visualize on the fruit quality (with the help of spider chart) based on different parameters. 



## Loading Libraries and Packages 
The packages with libraries are required to be installed in the system/environment of rstuio for this assignment are pacman, tidyverse, here, flextable, fmsb, scales, patchwork, and RColorBrewer. 


::: {.callout-note appearance="simple"}
## Spider Graph

Here, I have desgined a new graph, which is called spider graph. I kind of like it  to show the fruit's quality contrasting different quality attributing characters parameters. Although, its a huge process to wrangle the data for this graph but I liked it, and it can visualize beautifully. Another point to add about this graph. As I have added 3 spider graph in one row, so it look small but if I can zoom it then it becomes big and clear or if I will dynamically decrease the browser's window size then the column of the spider graph automatically get one another and becomes bigger, which is really beautiful to look! 
:::


```{r message=FALSE, warning=FALSE}
#| label: load_packages, load_functions

#install.packages(devtools::install_github("ricardo-bion/ggradar", dependencies = TRUE)

if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,# for lot of stuff
               here,  #manage file's location 
               ggplot2,
               flextable, #for table format
               scales, #spider graph scaling
               patchwork, #multi plotting
               fmsb, #for spider graph
               RColorBrewer, #color palette
               update = FALSE) 
```



## Data Input
After completing the normal tidyness of the excel file (available at data/raw.data folder), the comparatively cleaned file is then kept in the folder data/raw.data. Now lets input the data from the excel file to the rstudio.

```{r message=FALSE, warning=FALSE}
#| label: load_data

quality.data <- 
  readxl::read_xlsx (
    here::here("data", 
               "raw.data", 
               "HC_EX-Re_2022_Raw-Data.xlsx"), 
    sheet = "Quality_Data")
```



## Data Wrangling
As the data is now loaded in the environment we need to do a lot of sorting/wrangling to get the objectives. This document contains a lot of data. We need to wrangle the data to fulfill our objectives of the assignment as well as to visualize the data in a meaningful way. Here, I will select/wrangle/sort/clean only a few parameters. So, lets get started.

```{r message=FALSE, warning=FALSE}
#| label: data_wrangling

data <- quality.data %>% 
  dplyr::rename("trt" = "Treatment", #rename parameters based on our target 
                "repn"= "Replication", 
                "wt" = "Weight (g)", 
                "dm" = "Diameter (mm)", 
                "iec" = "IEC (ul/L)",
                "blush.p" = "Skin red blush (%)", 
                "puncture.a" = "Puncture side a", 
                "puncture.b" = "Puncture side b", 
                "starch" = "Starch Cornell", 
                "ssc" = "SSC (%)", 
                "acidity" = "TA (% Malic Acid)", 
                "pH" = "pH") %>% 
  dplyr::mutate(puncture = (puncture.a+puncture.b)/2) %>% #new parameter from average
  dplyr::relocate(blush.p, .after = dm) %>% #relocating parameter 
  dplyr::relocate(puncture, .after = iec) %>% 
  dplyr::relocate(starch, .after = puncture) %>% 
  dplyr::relocate(ssc:acidity, .after = starch) %>% 
  dplyr::select(trt:acidity) %>% #select only targeted parameters 
  dplyr::mutate(trt = case_when(   #Tretments needed to be renamed 
                          trt == "HC_CH_ER_T1_L" ~ "T1_CH0",
                          trt == "HC_CH+1_ER_T1_L" ~ "T1_CH1",
                          trt == "HC_CH+2_ER_T1_L" ~ "T1_CH2",
                          
                          trt == "HC_CH_ENR_T2_L" ~ "T2_CH0",
                          trt == "HC_CH+1_ENR_T2_L" ~ "T2_CH1",
                          trt == "HC_CH+2_ENR_T2_L" ~ "T2_CH2",
                          
                          trt == "HC_CH_NER_T3_L" ~ "T3_CH0",
                          trt == "HC_CH+1_NER_T3_L" ~ "T3_CH1",
                          trt == "HC_CH+2_NER_T3_L" ~ "T3_CH2",
                          
                          trt == "HC_CH_NENR_T4_L" ~ "T4_CH0",
                          trt == "HC_CH+1_NENR_T4_L" ~ "T4_CH1",
                          trt == "HC_CH+2_NENR_T4_L" ~ "T4_CH2",
                          TRUE ~ as.character(trt))) %>% 
  dplyr::mutate(dates = case_when(  #new parameter creation based on the harvesting date
    endsWith(trt, "0") ~ "9-1",
    endsWith(trt, "1") ~ "9-8", 
    endsWith(trt, "2") ~ "9-15")) %>% 
  dplyr::mutate(dates = as.Date(dates, "%m-%d")) %>% #make the dates as.Date, not as formate
  dplyr::mutate(dates = format(dates,"%m-%d")) %>%  #now make the format of the dates 
  dplyr::mutate(trt = case_when( #Rename treatments 
    startsWith(trt, "T1") ~ "T1", 
    startsWith(trt, "T2") ~ "T2",
    startsWith(trt, "T3") ~ "T3",
    startsWith(trt, "T4") ~ "T4")) %>% 
  dplyr::relocate(c(trt:acidity), .after = dates) %>% 
  dplyr::mutate_at(vars(trt:repn), factor) #convert data as factor 

```



### Saving the data as RDS file
As we have done the wrangling now we need to save the data as it is cleaned enough. And, we will save the data as RDS file. So, lets do it. 

```{r message=FALSE, warning=FALSE}
#| label: data_saving

saveRDS(data, 
        file = here("data",
                    "cleaned.data",
                    "data.RDS"))


save(data, 
     file = here("data", 
                 "cleaned.data", 
                 "data.RData"))
```



### Loading data (cleaned data) from the saved folder
Now we can load the data by the following command whenever it we needed the data. 

```{r message=FALSE, warning=FALSE}
#| label: data_loading

load(here::here("data",
                "cleaned.data",
                "data.RData"))
```



# Fulfilling the Objectives 
As until now the data contains harvesting dates, treatments, replications, weight, dameter, blush percentage, internal ethylene concentration, puncture data, starch content, soluble solids content, acidity (malic acid). As we fixed our objectives to visualize the data with a table, with some graph, and understand the meaning of the data if that helps to visualize the data the way it needed to understand. 



## Making a Table 

**A summary of fruits weight and diameter in different harvesting dates:**
Now time to make a table based on the summary. Firstly, group data based on dates and treatment, then make the summary with the information of minimum, mean, median, and maximum for fruits weight and fruits diameter. The table will be presentable based on the category of harvesting date and then treatment. 

```{r message=FALSE, warning=FALSE}
#| label: tbl-create_summary
#| tbl-cap: "Minimum, mean, median and maximum value for fruit weight (g) and fruit diameter of Honeycrisp apple in different harvesting time"

summary.table <-
  data %>% 
  dplyr::group_by(dates, trt) %>% #making the group based on harvesting dates and treatments
  dplyr::summarise(across(c(wt:dm), #summary of weight (g) and diameter of fruit
                          list(min = min, 
                               mean = mean, 
                               med = median, 
                               max = max),
                          na.rm = TRUE)) %>%
  dplyr::mutate(across(where(is.numeric), round, 2)) #2 decimal points value will be shown 


table <- flextable::flextable(summary.table) %>% #table using a flextable design
  flextable::separate_header() %>% 
  flextable::theme_booktabs(bold_header = TRUE) %>% 
  flextable::align(align = "center", part = "header") %>% 
  flextable::autofit() %>% 
  merge_v(j = c("dates")) %>% 
  border_outer() %>% 
  hline(i = c(4, 8), j = NULL, border = NULL, part = "body") %>% 
  vline(i = NULL, j = c(1, 2, 6), border = NULL, part = "all") 

table
```



## Making the Plots

**The plots will present data in a box plot as faceted structure:**
Here, I am trying to incorporate the facet grid both for the treatments and different harvesting dates to observe which kinds of visualization looks great to understand the quality parameters. Therefore, first I need to group data based on harvesting time, treatment, and replication then summarise the data for the blush percentage with facet grid view both for harvestimg time and treatments.  



```{r message=FALSE, warning=FALSE}
#| label: load_data

graph.data <- 
  readxl::read_xlsx (
    here::here("data", 
               "raw.data", 
               "Graph.xlsx"), 
    sheet = "Sheet1")

g.data <- graph.data %>% 
  dplyr::mutate_at(vars(Cities:Year), factor) %>% 
  dplyr::group_by(Cities, Year) %>% 
  dplyr::summarise(Crime_Rate = mean(Crime_Rate), na.rm=TRUE) %>% 
  dplyr::mutate(Year = fct_relevel(Year, "2019", "2020", "2021", "2022"))

ggplot(g.data,
         aes(x = Year,
             y = Crime_Rate)) +
  geom_boxplot(outlier.shape = NA)+
  facet_grid(. ~Cities)+
  theme_bw()+
  labs(x = "Year",
       y = "Crime Rate (Per Million Population)")+
  theme(axis.text.x = element_text(angle=35, hjust =.7))
```


### Plot-01. Box plot
```{r message=FALSE, warning=FALSE} 
#| label: fig-box_plot
#| warning: false
#| fig-cap: "Internal ethylene concentration of Honeycrisp apple in three dates during the ripening period on three affected by different treatments"
#| fig-subcap:
#|   - "Date-wise visualization"
#|   - "Treatment-wise visualization"
#| layout-ncol: 2
#| fig-width: 3.5
#| fig-height: 2.5 


trt.sum <- data %>% 
  dplyr::group_by(dates, trt, repn) %>% 
  dplyr::summarise(iec  = mean(iec), na.rm = TRUE) %>% 
  dplyr::mutate(trt = fct_relevel(trt, "T1","T2","T3","T4"))

boxplot.01 <- ggplot(trt.sum,
         aes(x = trt,
             y = iec)) +
  geom_boxplot(outlier.shape = NA)+
  facet_grid(. ~dates)+
  theme_bw()+
  labs(x = "Treatments",
       y = "Ethylene Conc.")+
  theme(axis.text.x = element_text(angle=35, hjust =.7))

boxplot.02 <- ggplot(trt.sum,
         aes(x = dates,
             y = iec)) +
  geom_boxplot(outlier.shape = NA)+
  facet_grid(. ~trt)+
  theme_bw()+
  labs(x = "Dates",
       y = "Ethylene Conc.")+
  theme(axis.text.x = element_text(angle=35, hjust =.7))

#showing the boxplot
boxplot.01
boxplot.02

```

## More Wrangling for Spider Graph
Spider graph is a specialized graph and its really attractive to look. After understanding the tibble style I figured that it requires the parameter's mean with minimum and maximum value. Also, the figures look great if the parameters are kept under 8 parameters. I have planned to incorporate 5 parameters for this graph. It is very easy to get the mean from my data but the 1st line and 2nd line required to have a additional maximum and minimum value (seems very hard). So, I wangled the data in different ways to generate my targeted graph (different time period), then extracted the max and min value of each parameter but this time I got different size's tibble. Therefore, I have followed several techniques to get the job done. The code will show the process elaborately. 

```{r message=FALSE, warning=FALSE} 
#| label: more_wrangling

#wrangle data again for the spider graph on 09-01-22----------------------------
spi1.data <- data %>% 
  filter(dates == "09-01") %>% 
  select(trt, blush.p, puncture:acidity) 

#mean of the dataframe and rename back to previous name to join easily
spi1.mean <- spi1.data %>% 
  group_by(trt) %>% 
  summarise(across(c(blush.p, puncture:acidity), list(mean = mean), na.rm = TRUE)) %>% 
  rename_with(~str_remove(., '_mean'))

#maximum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size 
spi1.max <- spi1.data %>% 
  summarise_if(is.numeric, max) %>% 
  mutate(trt = "max") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt))

#minimum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size
spi1.min <- spi1.data %>% 
  summarise_if(is.numeric, min) %>% 
  mutate(trt = "min") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt)) 

#now join this maximum, minimum and mean value of treatments together as dataframe 
spi1.joined <- rbind (spi1.max, spi1.min, spi1.mean) 
spiplot1.data <- data.frame(spi1.joined, row.names = 1)z


#wrangle data again for the spider graph on 09-08-22----------------------------
spi2.data <- data %>% 
  filter(dates == "09-08") %>% 
  select(trt, blush.p, puncture:acidity)

#mean of the dataframe and rename back to previous name to join easily
spi2.mean <- spi2.data %>% 
  group_by(trt) %>% 
  summarise(across(c(blush.p, puncture:acidity), list(mean = mean), na.rm = TRUE)) %>% 
  rename_with(~str_remove(., '_mean'))

#maximum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size 
spi2.max <- spi2.data %>% 
  summarise_if(is.numeric, max) %>% 
  mutate(trt = "max") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt))

#minimum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size
spi2.min <- spi2.data %>% 
  summarise_if(is.numeric, min) %>% 
  mutate(trt = "min") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt)) 

#now join this maximum, minimum and mean value of treatments together as dataframe 
spi2.joined <- rbind (spi2.max, spi2.min, spi2.mean) 
spiplot2.data <- data.frame(spi2.joined, row.names = 1)


#wrangle data again for the spider graph on 09-15-22----------------------------
spi3.data <- data %>% 
  filter(dates == "09-15") %>% 
  select(trt, blush.p, puncture:acidity)

#mean of the dataframe and rename back to previous name to join easily
spi3.mean <- spi3.data %>% 
  group_by(trt) %>% 
  summarise(across(c(blush.p, puncture:acidity), list(mean = mean), na.rm = TRUE)) %>% 
  rename_with(~str_remove(., '_mean'))

#maximum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size 
spi3.max <- spi3.data %>% 
  summarise_if(is.numeric, max) %>% 
  mutate(trt = "max") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt))

#minimum value of the treatments but with it gives different tibble and through mutate we make it same size tibble as the mean tibble size
spi3.min <- spi3.data %>% 
  summarise_if(is.numeric, min) %>% 
  mutate(trt = "min") %>% 
  relocate(trt, .before = blush.p) %>% 
  mutate(trt = as.factor(trt)) 

#now join this maximum, minimum and mean value of treatments together as dataframe 
spi3.joined <- rbind (spi3.max, spi3.min, spi3.mean) 
spiplot3.data <- data.frame(spi3.joined, row.names = 1)

#So, we are ready to make the spider graph. We will use the spiderplot3.data, spiderplot2.data, and spiderplot1.data to generate spider graph in our next code chunk! 
```



### Plot-2. Spider graph at different harvesting time
```{r message=FALSE, warning=FALSE} 
#| label: fig-spider_plot
#| warning: false
#| fig-cap: "Fruit quality of Honeycrisp apple cultivar affected by different treatments based on selected parameters on different harvesting time"
#| fig-subcap:
#|   - "September 01, 2022"
#|   - "September 08, 2022"
#|   - "September 15, 2022"
#| layout-ncol: 3
#| fig-width: 7
#| fig-height: 5


#The next three lines of code (commented) have a very basic design of the spider graph but I have edited the basic design in the next part. 
# radarchart(spiplot1.data)
# radarchart(spiplot2.data)
# radarchart(spiplot3.data)


#Customized designed spider graph
coul <- brewer.pal(4, "Dark2") #color for fill and border
colors_border <- coul
colors_in <- alpha(coul,0.3)

#1st spider chart
radarchart( spiplot1.data [-c(1,2),]  , axistype=2 , maxmin=F,
    #custom polygon
    pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
    #custom the grid
    cglcol="grey", cglty=1, axislabcol="grey", cglwd=0.8,
    #custom labels
    vlcex=0.8
    )

# Add a legend
legend(x=1.5, y=1, legend = rownames(spiplot1.data [-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "black", cex=1.2, pt.cex=3)

#2nd spider chart
radarchart( spiplot2.data [-c(1,2),]  , axistype=2 , maxmin=F,
    #custom polygon
    pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
    #custom the grid
    cglcol="grey", cglty=1, axislabcol="grey", cglwd=0.8,
    #custom labels
    vlcex=0.8
    )

# Add a legend
legend(x=1.5, y=1, legend = rownames(spiplot2.data [-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "black", cex=1.2, pt.cex=3)

#3rd spider chart
radarchart( spiplot3.data [-c(1,2),]  , axistype=2 , maxmin=F,
    #custom polygon
    pcol=colors_border , pfcol=colors_in , plwd=1.5 , plty=1,
    #custom the grid
    cglcol="grey", cglty=1, axislabcol="grey", cglwd=0.8,
    #custom labels
    vlcex=0.8
    )

# Add a legend
legend(x=1.5, y=1, legend = rownames(spiplot3.data [-c(1,2),]), bty = "n", pch=20 , col=colors_in , text.col = "black", cex=1.2, pt.cex=3)
```



## Saving the Plots 
For saving the plots we are just crated, In case of box plot I have used ggsave option with the help patchwork to produce multi-plot at a time. But for the spider plot I did not find a proper coding way that can produce the plot I made in the qmd file.  

### Handy Way to Save Spider plot
After spending a lot of time, I found several ways to save the spider plot out of qmd file. 

**Method-1.** All I did after completing the rendering of this qmd file, I then load the data, and run code chunk in the qmd file till the view pane of the code chunk shows the plot. Then I copy the code chunk, add code before and after the plot (png before plot chunk and dev.off after code chunk) and from there I can able to save the plot (a rscript named *save_spiderplot_option_01* is present with this code chunk in the code sub-directory of this project), although *very low quality* of the plot are noticed based on the resolution and there are also some *distorted design* comparing the qmd one. The sample plots are present in the plot sub-directory of this project. 

**Method-2.** I followed another way just by copying the code chunk in a new Rscript and selecting one plot chunk at a time and run it to produce plot (a rscript named *save_spiderplot_option_02* is present with this code chunk in the code sub-directory of this project) in the plots view pane of the rstudio window. Then export to save in any location in the pc and in any format. But still same issues are also noticed here concerning the *quality and design* of the plots. Samples are present in the plot sub-directory of this project. 

**Method-3.** I think this is *the BEST option* to save the plot out of the qmd file, specifically for situation like this. So, what I did is rendered the qmd file, open the html file in the browser and saved the image from the browser in any place in the pc and this time it is what it is needed to be. The *best resolution with expected design*. I have saved plots by this way and those sample are in output folder also. 

```{r message=FALSE, warning=FALSE}
#| label: save_the_plots


#arrange the plots in two column by one row
boxplot <- ((boxplot.01|boxplot.02)) +
  plot_annotation(tag_levels = 'A')

#save the box plots in a combined way
ggsave(filename = here("plot",
                       "boxplot.png"),
       dpi = 400, width = 7, height = 5, units = "in", bg = "white")
```



# Conclusion 
I think this is all that I required to submit for this assignment. It seems to me now, wrangling and visualizing are possible in the the preferable ways but thinking/imagination is the first thing to perform before coding. 



::: {.callout-note}
I noticed that keeping warning/message option sometimes helpful to understand what is going wrong. I mean, it gives hints to look at the right point of the code chunk. So, I always keep option open. But, sometimes when I go to render the document into html, the warning/message showing up. So, after completing the objectives of this assignment I have put warning/message off for every code chunk, as the objectives are completed so no need to show the warning/message. It will be helpful if I get one code for the whole qmd file to off the warning/message. I searched but did not get anything helpful yet. So, put (message=FALSE, warning=FALSE) in between every r code header.
:::